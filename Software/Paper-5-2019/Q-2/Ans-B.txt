I'll explain Coupling and Cohesion along with their different types.

COUPLING:
Coupling refers to the degree of interdependence between software modules. Low coupling is desired for building maintainable software.

Types of Coupling (from worst to best):

1. Content Coupling (Worst)
- One module directly references the content of another module
- Modules share code or data structure
- Changes in one module require changes in another
Example:
```python
# Module A directly modifies data in Module B
class ModuleB:
    def __init__(self):
        self.data = 10

class ModuleA:
    def modify_B(self, b):
        b.data = 20  # Directly accessing B's internal data
```

2. Common Coupling
- Modules share global data
- Changes to global data affect all modules
Example:
```python
GLOBAL_DATA = []  # Shared global data

class ModuleA:
    def process(self):
        GLOBAL_DATA.append("data")

class ModuleB:
    def process(self):
        GLOBAL_DATA.pop()
```

3. Control Coupling
- One module controls the flow of another module
- Passes control flags to dictate behavior
Example:
```python
class Printer:
    def print_data(self, data, format_type):
        if format_type == "JSON":
            self.print_json(data)
        elif format_type == "XML":
            self.print_xml(data)
```

4. Stamp Coupling
- Modules share a composite data structure
- Not all elements of shared data are used
Example:
```python
class Student:
    def __init__(self, name, age, address, grades):
        self.name = name
        self.age = age
        self.address = address
        self.grades = grades

class PrintModule:
    def print_name(self, student):  # Receives entire student object but uses only name
        print(student.name)
```

5. Data Coupling (Best)
- Modules share data through parameters
- Only required data is passed
Example:
```python
class Calculator:
    def add(self, a, b):  # Only necessary data is passed
        return a + b

class Client:
    def process(self):
        calc = Calculator()
        result = calc.add(5, 3)
```

COHESION:
Cohesion refers to the degree to which elements within a module belong together. High cohesion is desired.

Types of Cohesion (from worst to best):

1. Coincidental Cohesion (Worst)
- Parts of a module are grouped arbitrarily
- No meaningful relationship between elements
Example:
```python
class Utilities:
    def print_data(self, data):
        print(data)
    
    def calculate_age(self, birth_year):
        return 2024 - birth_year
    
    def format_text(self, text):
        return text.upper()
```

2. Logical Cohesion
- Elements perform similar functions
- Grouped by category but not functionality
Example:
```python
class InputHandler:
    def get_keyboard_input(self):
        pass
    
    def get_mouse_input(self):
        pass
    
    def get_network_input(self):
        pass
```

3. Temporal Cohesion
- Elements are related by timing
- Executed together but functionally different
Example:
```python
class SystemStartup:
    def startup(self):
        self.initialize_database()
        self.load_configurations()
        self.start_services()
        self.connect_network()
```

4. Procedural Cohesion
- Elements follow a specific sequence
- Order of execution is important
Example:
```python
class OrderProcessor:
    def process_order(self):
        self.validate_order()
        self.check_inventory()
        self.process_payment()
        self.create_shipment()
```

5. Communicational Cohesion
- Elements operate on same data
- Share common inputs or outputs
Example:
```python
class StudentRecord:
    def __init__(self, student_data):
        self.student_data = student_data
    
    def calculate_gpa(self):
        # Uses student_data
        pass
    
    def generate_transcript(self):
        # Uses student_data
        pass
```

6. Sequential Cohesion
- Output of one element is input to another
- Elements form a chain of functionality
Example:
```python
class DataProcessor:
    def process_data(self, raw_data):
        filtered_data = self.filter_data(raw_data)
        normalized_data = self.normalize(filtered_data)
        return self.format_output(normalized_data)
```

7. Functional Cohesion (Best)
- All elements contribute to a single task
- Perfect cohesion
Example:
```python
class EmailValidator:
    def validate_email(self, email):
        return (self._check_format(email) and
                self._check_domain(email) and
                self._check_length(email))
    
    def _check_format(self, email):
        # Check email format
        pass
    
    def _check_domain(self, email):
        # Check domain validity
        pass
    
    def _check_length(self, email):
        # Check email length
        pass
```

Best Practices:

1. For Coupling:
- Minimize dependencies between modules
- Use interfaces and abstraction
- Avoid global variables
- Pass only required data

2. For Cohesion:
- Group related functionality
- Single Responsibility Principle
- Clear module purpose
- Logical organization of code

3. Combined Benefits:
- Improved maintainability
- Better testability
- Easier debugging
- Enhanced reusability
- Simplified understanding